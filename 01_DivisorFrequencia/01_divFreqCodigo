library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity divFreq is

port (acel	 : in std_logic_vector (1 downto 0);
		clkIn  : in std_logic;
		clkOut : out std_logic);
end divFreq;

architecture compDivFreq of divFreq is
signal valorDiv : integer;
signal s_divCont : natural;

begin
	comb: process (acel)
			begin
			
				case (acel) is
				
					when "01" =>
						valorDiv <= 50000000;
					
					when "10" =>
						valorDiv <= 5000000;
					
					when "11" =>
						valorDiv <= 833333;
					
					when others => valorDiv <= 3000000000;
				
				end case;			
			end process;	


	sync:	process (clkIN)
			begin
			
				if (rising_edge(clkIn)) then
							
					if (s_divCont >= valorDiv - 1) then
						s_divCont <= 0;
				
					else 
						s_divCont <= s_divCont + 1;
					end if;
				
				end if;
			end process;
	
	clkOut <= '1' when (s_divCont >= (valorDiv/2)) else '0';	
			
end compDivFreq;		
